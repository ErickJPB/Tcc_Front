import { ChangeDetectionStrategy, Component, forwardRef, ViewChildren } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { PoCheckboxGroupBaseComponent } from './po-checkbox-group-base.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../po-field-container/po-field-container-bottom/po-field-container-bottom.component";
import * as i3 from "../po-field-container/po-field-container.component";
const _c0 = ["checkboxLabel"];
function PoCheckboxGroupComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵelement(1, "input", 4);
    i0.ɵɵelementStart(2, "label", 5, 6);
    i0.ɵɵlistener("click", function PoCheckboxGroupComponent_div_3_Template_label_click_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r4); const option_r1 = restoredCtx.$implicit; const ctx_r3 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r3.checkOption(option_r1)); })("keydown", function PoCheckboxGroupComponent_div_3_Template_label_keydown_2_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r4); const option_r1 = restoredCtx.$implicit; const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.onKeyDown($event, option_r1)); });
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const option_r1 = ctx.$implicit;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassMapInterpolate2("po-checkbox-group-item po-md-", ctx_r0.mdColumns, " po-lg-", ctx_r0.columns, "");
    i0.ɵɵclassProp("po-checkbox-group-item-disabled", option_r1.disabled || ctx_r0.disabled);
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("po-checkbox-group-input-checked", ctx_r0.checkedOptions[option_r1.value])("po-checkbox-group-input-indeterminate", ctx_r0.checkedOptions[option_r1.value] === null);
    i0.ɵɵproperty("checked", option_r1.value)("disabled", option_r1.disabled || ctx_r0.disabled)("id", option_r1.id)("required", ctx_r0.required)("value", option_r1.value);
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("po-clickable", !option_r1.disabled && !ctx_r0.disabled);
    i0.ɵɵproperty("for", option_r1.id)("tabindex", option_r1.disabled || ctx_r0.disabled ? -1 : 0);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", option_r1.label, " ");
} }
/**
 * @docsExtends PoCheckboxGroupBaseComponent
 *
 * @example
 *
 * <example name="po-checkbox-group-basic" title="PO Checkbox Group Basic">
 *  <file name="sample-po-checkbox-group-basic/sample-po-checkbox-group-basic.component.html"> </file>
 *  <file name="sample-po-checkbox-group-basic/sample-po-checkbox-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-group-labs" title="PO Checkbox Group Labs">
 *  <file name="sample-po-checkbox-group-labs/sample-po-checkbox-group-labs.component.html"> </file>
 *  <file name="sample-po-checkbox-group-labs/sample-po-checkbox-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-group-password-policy" title="PO Checkbox Group – Security policy">
 *  <file name="sample-po-checkbox-group-password-policy/sample-po-checkbox-group-password-policy.component.html"> </file>
 *  <file name="sample-po-checkbox-group-password-policy/sample-po-checkbox-group-password-policy.component.ts"> </file>
 * </example>
 */
export class PoCheckboxGroupComponent extends PoCheckboxGroupBaseComponent {
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
    }
    ngAfterViewChecked() {
        this.changeDetector.detectChanges();
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoCheckboxGroupComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoCheckboxGroupComponent, { static: true }) checkbox: PoCheckboxGroupComponent;
     *
     * focusCheckbox() {
     *   this.checkbox.focus();
     * }
     * ```
     */
    focus() {
        if (this.checkboxLabels && !this.disabled) {
            const checkboxLabel = this.checkboxLabels.find((_, index) => !this.options[index].disabled);
            if (checkboxLabel) {
                checkboxLabel.nativeElement.focus();
            }
        }
    }
    onKeyDown(event, option) {
        const spaceBar = 32;
        if (event.which === spaceBar || event.keyCode === spaceBar) {
            this.checkOption(option);
            event.preventDefault();
        }
    }
    trackByFn(index) {
        return index;
    }
}
PoCheckboxGroupComponent.ɵfac = function PoCheckboxGroupComponent_Factory(t) { return new (t || PoCheckboxGroupComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoCheckboxGroupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoCheckboxGroupComponent, selectors: [["po-checkbox-group"]], viewQuery: function PoCheckboxGroupComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.checkboxLabels = _t);
    } }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoCheckboxGroupComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoCheckboxGroupComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 5, consts: [[3, "p-help", "p-label", "p-optional"], [1, "po-field-container-content", "po-checkbox-group-content"], [1, "po-row", "po-pt-1", "po-pb-1"], [3, "class", "po-checkbox-group-item-disabled", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["type", "checkbox", 1, "po-input", "po-checkbox-group-input", 3, "checked", "disabled", "id", "required", "value"], [1, "po-checkbox-group-label", 3, "for", "tabindex", "click", "keydown"], ["checkboxLabel", ""]], template: function PoCheckboxGroupComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "div", 2);
        i0.ɵɵtemplate(3, PoCheckboxGroupComponent_div_3_Template, 5, 20, "div", 3);
        i0.ɵɵelementEnd()();
        i0.ɵɵelement(4, "po-field-container-bottom");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("p-help", ctx.help)("p-label", ctx.label)("p-optional", !ctx.required && ctx.optional);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", ctx.checkboxGroupOptionsView)("ngForTrackBy", ctx.trackByFn);
    } }, dependencies: [i1.NgForOf, i2.PoFieldContainerBottomComponent, i3.PoFieldContainerComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxGroupComponent, [{
        type: Component,
        args: [{ selector: 'po-checkbox-group', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoCheckboxGroupComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoCheckboxGroupComponent),
                        multi: true
                    }
                ], template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div class=\"po-field-container-content po-checkbox-group-content\">\n    <div class=\"po-row po-pt-1 po-pb-1\">\n      <div\n        *ngFor=\"let option of checkboxGroupOptionsView; trackBy: trackByFn\"\n        class=\"po-checkbox-group-item po-md-{{ mdColumns }} po-lg-{{ columns }}\"\n        [class.po-checkbox-group-item-disabled]=\"option.disabled || disabled\"\n      >\n        <input\n          class=\"po-input po-checkbox-group-input\"\n          type=\"checkbox\"\n          [class.po-checkbox-group-input-checked]=\"checkedOptions[option.value]\"\n          [class.po-checkbox-group-input-indeterminate]=\"checkedOptions[option.value] === null\"\n          [checked]=\"option.value\"\n          [disabled]=\"option.disabled || disabled\"\n          [id]=\"option.id\"\n          [required]=\"required\"\n          [value]=\"option.value\"\n        />\n\n        <label\n          #checkboxLabel\n          class=\"po-checkbox-group-label\"\n          [class.po-clickable]=\"!option.disabled && !disabled\"\n          [for]=\"option.id\"\n          [tabindex]=\"option.disabled || disabled ? -1 : 0\"\n          (click)=\"checkOption(option)\"\n          (keydown)=\"onKeyDown($event, option)\"\n        >\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n" }]
    }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { checkboxLabels: [{
            type: ViewChildren,
            args: ['checkboxLabel']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,