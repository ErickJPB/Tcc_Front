import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, forwardRef, HostListener, ViewChild, Input, Output, EventEmitter } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { isMobile, removeDuplicatedOptions, removeUndefinedAndNullOptions, validValue } from '../../../utils/util';
import { PoControlPositionService } from './../../../services/po-control-position/po-control-position.service';
import { PoKeyCodeEnum } from './../../../enums/po-key-code.enum';
import { PoFieldValidateModel } from '../po-field-validate.model';
import { InputBoolean } from '../../../decorators';
import * as i0 from "@angular/core";
import * as i1 from "./../../../services/po-control-position/po-control-position.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "../po-field-container/po-field-container-bottom/po-field-container-bottom.component";
import * as i5 from "../po-field-container/po-field-container.component";
const _c0 = ["contentList"];
const _c1 = ["icon"];
const _c2 = ["select"];
const _c3 = ["selectButton"];
function PoSelectComponent_option_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "option", 14);
} }
function PoSelectComponent_option_4_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "option", 15);
    i0.ɵɵlistener("click", function PoSelectComponent_option_4_Template_option_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r9); const option_r7 = restoredCtx.$implicit; const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.onOptionClick(option_r7)); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r7 = ctx.$implicit;
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("disabled", ctx_r2.readonly)("value", option_r7.value);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", option_r7 == null ? null : option_r7.label, " ");
} }
function PoSelectComponent_li_15_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoSelectComponent_li_15_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r10 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(option_r10 == null ? null : option_r10.label);
} }
function PoSelectComponent_li_15_ng_template_5_Template(rf, ctx) { }
const _c4 = function (a0) { return { $implicit: a0 }; };
function PoSelectComponent_li_15_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 16);
    i0.ɵɵlistener("click", function PoSelectComponent_li_15_Template_li_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r18); const option_r10 = restoredCtx.$implicit; const ctx_r17 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r17.onOptionClick(option_r10)); });
    i0.ɵɵelementStart(1, "div", 17);
    i0.ɵɵtemplate(2, PoSelectComponent_li_15_ng_container_2_Template, 1, 0, "ng-container", 18);
    i0.ɵɵtemplate(3, PoSelectComponent_li_15_ng_template_3_Template, 2, 1, "ng-template", null, 19, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtemplate(5, PoSelectComponent_li_15_ng_template_5_Template, 0, 0, "ng-template", 20, 21, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const option_r10 = ctx.$implicit;
    const _r12 = i0.ɵɵreference(4);
    const _r14 = i0.ɵɵreference(6);
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-select-item-selected", ctx_r6.selectedValue === option_r10.value);
    i0.ɵɵproperty("value", option_r10.value);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r6.selectOptionTemplate)("ngIfThen", _r14)("ngIfElse", _r12);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r6.selectOptionTemplate == null ? null : ctx_r6.selectOptionTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction1(8, _c4, option_r10));
} }
const _c5 = function (a0, a1) { return { "po-select-mobile": a0, "po-invisible": a1 }; };
const _c6 = function (a0, a1) { return { "po-select-button-disabled": a0, "po-select-button-readonly": a1 }; };
const _c7 = function (a0, a1) { return { "po-field-icon-disabled": a0, "po-field-icon-readonly": a1 }; };
const _c8 = function (a0) { return { "po-invisible": a0 }; };
const poSelectContentOffset = 8;
const poSelectContentPositionDefault = 'bottom';
/**
 * @docsExtends PoFieldValidateModel
 *
 * @example
 *
 * <example name="po-select-basic" title="PO Select Basic">
 *   <file name="sample-po-select-basic/sample-po-select-basic.component.html"> </file>
 *   <file name="sample-po-select-basic/sample-po-select-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-select-labs" title="PO Select Labs">
 *   <file name="sample-po-select-labs/sample-po-select-labs.component.html"> </file>
 *   <file name="sample-po-select-labs/sample-po-select-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-select-customer-registration" title="PO Select - Customer registration">
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.html"> </file>
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.ts"> </file>
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.service.ts"> </file>
 *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.e2e-spec.ts'> </file>
 *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.po.ts'> </file>
 * </example>
 *
 * @description
 *
 * O componente po-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
 * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
 * O po-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
 * O po-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.
 *
 * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.
 *
 * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,
 * veja mais em **[p-combo-option-template](/documentation/po-combo-option-template)**.
 *
 * > Obs: o template **[p-select-option-template](/documentation/po-select-option-template)** será depreciado na versão 14.x.x.
 */
export class PoSelectComponent extends PoFieldValidateModel {
    /* istanbul ignore next */
    constructor(element, changeDetector, differs, renderer, controlPosition) {
        super();
        this.element = element;
        this.changeDetector = changeDetector;
        this.renderer = renderer;
        this.controlPosition = controlPosition;
        /**
         * @optional
         *
         * @description
         *
         * Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
         *
         * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
         * two-way binding no componente deve se utilizar da seguinte forma:
         *
         * ```
         * <po-select ... [ngModel]="selectModel" (ngModelChange)="selectModel = $event"> </po-select>
         * ```
         */
        this.ngModelChange = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será somente para leitura.
         *
         * @default `false`
         */
        this.readonly = false;
        this.isMobile = isMobile();
        this.open = false;
        this.selectIcon = 'po-icon-arrow-down';
        this.onScroll = () => {
            this.controlPosition.adjustPosition(poSelectContentPositionDefault);
        };
        this.differ = differs.find([]).create(null);
    }
    /**
     * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface `PoSelectOption`.
     *
     * Caso esta lista estiver vazia, o model será `undefined`.
     *
     * > Essa propriedade é imutável, ou seja, sempre que quiser atualizar a lista de opções disponíveis
     * atualize a referência do objeto:
     *
     * ```
     * // atualiza a referência do objeto garantindo a atualização do template
     * this.options = [...this.options, { value: 'x', label: 'Nova opção' }];
     *
     * // evite, pois não atualiza a referência do objeto podendo gerar atrasos na atualização do template
     * this.options.push({ value: 'x', label: 'Nova opção' });
     * ```
     */
    set options(options) {
        this._options = options;
        removeDuplicatedOptions(this._options);
        removeUndefinedAndNullOptions(this._options);
        this.onUpdateOptions();
    }
    get options() {
        return this._options;
    }
    get isInvisibleSelectNative() {
        return this.readonly && this.isMobile;
    }
    onKeydown($event) {
        const charCode = $event.which || $event.keyCode;
        // Tratamentos para quando o readonly for ativado.
        if (this.readonly) {
            // deve matar o evento do teclado devido a alterar o valor do model mesmo com os options fechados
            if (charCode !== PoKeyCodeEnum.tab) {
                this.disableDefaultEventAndToggleButton();
                $event.preventDefault();
            }
            return;
        }
        // Seleciona os itens com as teclas "up" e "down"
        if ((!this.open || $event.altKey) && (charCode === PoKeyCodeEnum.arrowDown || charCode === PoKeyCodeEnum.arrowUp)) {
            this.disableDefaultEventAndToggleButton();
        }
        // Abre o po-select com as teclas "enter" e "espaço"
        if (charCode === PoKeyCodeEnum.enter || charCode === PoKeyCodeEnum.space) {
            this.disableDefaultEventAndToggleButton();
        }
        // Fecha o po-select com a tecla "tab"
        if (this.open && charCode === PoKeyCodeEnum.tab) {
            $event.preventDefault();
            this.toggleButton();
        }
    }
    ngDoCheck() {
        const change = this.differ.diff(this.options);
        if (change) {
            removeDuplicatedOptions(this.options);
            removeUndefinedAndNullOptions(this.options);
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoSelectComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoSelectComponent, { static: true }) select: PoSelectComponent;
     *
     * focusSelect() {
     *   this.select.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.selectElement.nativeElement.focus();
        }
    }
    hideDropDown() {
        this.selectIcon = 'po-icon-arrow-down';
        this.selector('.po-select-container').classList.remove('po-select-show');
        this.open = false;
        this.changeDetector.markForCheck();
        this.selectElement.nativeElement.focus();
        this.removeListeners();
    }
    onBlur() {
        this.onModelTouched?.();
    }
    onOptionClick(option) {
        this.updateValues(option);
        this.toggleButton();
    }
    // Altera o valor ao selecionar um item.
    onSelectChange(value) {
        if (value && this.options && this.options.length) {
            const optionFound = this.findOptionValue(value);
            if (optionFound) {
                this.updateValues(optionFound);
                this.setScrollPosition(optionFound.value);
            }
        }
    }
    onUpdateOptions() {
        if (this.modelValue) {
            this.onSelectChange(this.modelValue);
        }
    }
    scrollValue(index, clientHeight) {
        const heightScrollValue = index * this.getSelectItemHeight();
        return (this.scrollPosition = heightScrollValue > clientHeight ? heightScrollValue : 0);
    }
    selector(query) {
        return this.element.nativeElement.querySelector(query);
    }
    toggleButton() {
        this.open ? this.hideDropDown() : this.showDropdown();
    }
    // Atualiza valores
    updateValues(option) {
        if (this.selectedValue !== option.value) {
            this.selectedValue = option.value;
            this.selectElement.nativeElement.value = option.value;
            this.updateModel(option.value);
            this.displayValue = option.label;
            this.emitChange(option.value);
        }
    }
    // Esconde Content do Select quando for clicado fora
    wasClickedOnToggle(event) {
        if (!this.selectButtonElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target)) {
            this.hideDropDown();
        }
    }
    // Recebe as alterações do model
    onWriteValue(value) {
        const optionFound = this.findOptionValue(value);
        if (optionFound) {
            this.selectElement.nativeElement.value = optionFound.value;
            this.selectedValue = optionFound.value;
            this.displayValue = optionFound.label;
            this.setScrollPosition(optionFound.value);
        }
        else if (validValue(this.selectedValue)) {
            this.selectElement.nativeElement.value = undefined;
            this.updateModel(undefined);
            this.selectedValue = undefined;
            this.displayValue = undefined;
        }
        this.modelValue = value;
        this.changeDetector.detectChanges();
    }
    extraValidation(c) {
        return null;
    }
    isEqual(value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) || (value === undefined && inputValue !== undefined)) {
            value = `${value}`; // Transformando em string
        }
        return value === inputValue;
    }
    // Método necessário para bloquear o evento default do select nativo.
    // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
    disableDefaultEventAndToggleButton() {
        this.selectElement.nativeElement.style.display = 'none';
        setTimeout(() => {
            this.selectElement.nativeElement.style.display = 'block';
            this.toggleButton();
        });
    }
    findOptionValue(value) {
        return this.options.find(option => this.isEqual(option.value, value));
    }
    getSelectItemHeight() {
        const selectItem = this.selector('div.po-select-item');
        return selectItem && selectItem.clientHeight;
    }
    initializeListeners() {
        this.clickoutListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnToggle(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', () => {
            this.hideDropDown();
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        this.eventResizeListener();
        window.removeEventListener('scroll', this.onScroll, true);
    }
    setPositionDropdown() {
        this.controlPosition.setElements(this.contentList.nativeElement, poSelectContentOffset, this.selectButtonElement, ['top', 'bottom'], true);
        this.controlPosition.adjustPosition(poSelectContentPositionDefault);
    }
    setScrollPosition(value) {
        const ulDropdpwn = this.element.nativeElement.querySelector('ul.po-select-content');
        if (value && this.options && this.options.length) {
            const optionFound = this.findOptionValue(value);
            if (optionFound) {
                const index = this.options.indexOf(optionFound);
                ulDropdpwn.scrollTop = this.scrollValue(index, ulDropdpwn.clientHeight);
            }
        }
    }
    showDropdown() {
        if (!this.readonly) {
            this.selectElement.nativeElement.focus();
            this.selectIcon = 'po-icon-arrow-up';
            this.selector('.po-select-container').classList.add('po-select-show');
            this.open = true;
            this.changeDetector.markForCheck();
            this.setPositionDropdown();
            this.initializeListeners();
            if (this.options && this.options.length) {
                this.setScrollPosition(this.selectedValue);
            }
        }
    }
}
PoSelectComponent.ɵfac = function PoSelectComponent_Factory(t) { return new (t || PoSelectComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.PoControlPositionService)); };
PoSelectComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSelectComponent, selectors: [["po-select"]], viewQuery: function PoSelectComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7, ElementRef);
        i0.ɵɵviewQuery(_c1, 7, ElementRef);
        i0.ɵɵviewQuery(_c2, 7, ElementRef);
        i0.ɵɵviewQuery(_c3, 7, ElementRef);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentList = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iconElement = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectElement = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectButtonElement = _t.first);
    } }, hostBindings: function PoSelectComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("keydown", function PoSelectComponent_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); });
    } }, inputs: { readonly: ["p-readonly", "readonly"], placeholder: ["p-placeholder", "placeholder"], options: ["p-options", "options"] }, outputs: { ngModelChange: "ngModelChange" }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoSelectComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoSelectComponent),
                multi: true
            },
            PoControlPositionService
        ]), i0.ɵɵInheritDefinitionFeature], decls: 17, vars: 28, consts: [[3, "p-label", "p-help", "p-optional"], [1, "po-select", 3, "disabled", "ngClass", "required", "change", "blur"], ["select", ""], ["disabled", "", "hidden", "", "selected", "", 4, "ngIf"], [3, "disabled", "value", "click", 4, "ngFor", "ngForOf"], [1, "po-select-container"], [1, "po-select-button", 3, "ngClass", "click"], ["selectButton", ""], [1, "po-field-icon-container-right"], [3, "ngClass"], ["icon", ""], [1, "po-select-content", 3, "ngClass"], ["contentList", ""], [3, "po-select-item-selected", "value", "click", 4, "ngFor", "ngForOf"], ["disabled", "", "hidden", "", "selected", ""], [3, "disabled", "value", "click"], [3, "value", "click"], [1, "po-select-item"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["defaultOptionTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["optionTemplate", ""]], template: function PoSelectComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "po-field-container", 0)(1, "select", 1, 2);
        i0.ɵɵlistener("change", function PoSelectComponent_Template_select_change_1_listener($event) { return ctx.onSelectChange($event.target.value); })("blur", function PoSelectComponent_Template_select_blur_1_listener() { return ctx.onBlur(); });
        i0.ɵɵtemplate(3, PoSelectComponent_option_3_Template, 1, 0, "option", 3);
        i0.ɵɵtemplate(4, PoSelectComponent_option_4_Template, 2, 3, "option", 4);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(5, "div", 5)(6, "div", 6, 7);
        i0.ɵɵlistener("click", function PoSelectComponent_Template_div_click_6_listener() { return ctx.toggleButton(); });
        i0.ɵɵelementStart(8, "span");
        i0.ɵɵtext(9);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(10, "div", 8);
        i0.ɵɵelement(11, "span", 9, 10);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(13, "ul", 11, 12);
        i0.ɵɵtemplate(15, PoSelectComponent_li_15_Template, 7, 10, "li", 13);
        i0.ɵɵelementEnd()();
        i0.ɵɵelement(16, "po-field-container-bottom");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("p-label", ctx.label)("p-help", ctx.help)("p-optional", !ctx.required && ctx.optional);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("disabled", ctx.disabled)("ngClass", i0.ɵɵpureFunction2(17, _c5, ctx.isMobile, ctx.isInvisibleSelectNative))("required", ctx.required);
        i0.ɵɵattribute("name", ctx.name);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.isMobile);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx.options);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(20, _c6, ctx.disabled, ctx.readonly));
        i0.ɵɵadvance(3);
        i0.ɵɵtextInterpolate(ctx.displayValue || ctx.placeholder);
        i0.ɵɵadvance(2);
        i0.ɵɵclassMapInterpolate1("po-icon ", ctx.selectIcon, " po-field-icon");
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(23, _c7, ctx.disabled, ctx.readonly));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(26, _c8, ctx.isMobile));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx.options);
    } }, dependencies: [i2.NgClass, i2.NgForOf, i2.NgIf, i2.NgTemplateOutlet, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i4.PoFieldContainerBottomComponent, i5.PoFieldContainerComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], PoSelectComponent.prototype, "readonly", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSelectComponent, [{
        type: Component,
        args: [{ selector: 'po-select', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoSelectComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoSelectComponent),
                        multi: true
                    },
                    PoControlPositionService
                ], template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <select\n    #select\n    class=\"po-select\"\n    [attr.name]=\"name\"\n    [disabled]=\"disabled\"\n    [ngClass]=\"{ 'po-select-mobile': isMobile, 'po-invisible': isInvisibleSelectNative }\"\n    [required]=\"required\"\n    (change)=\"onSelectChange($event.target.value)\"\n    (blur)=\"onBlur()\"\n  >\n    <option *ngIf=\"isMobile\" disabled hidden selected></option>\n    <option *ngFor=\"let option of options\" [disabled]=\"readonly\" [value]=\"option.value\" (click)=\"onOptionClick(option)\">\n      {{ option?.label }}\n    </option>\n  </select>\n\n  <div class=\"po-select-container\">\n    <div\n      #selectButton\n      class=\"po-select-button\"\n      [ngClass]=\"{ 'po-select-button-disabled': disabled, 'po-select-button-readonly': readonly }\"\n      (click)=\"toggleButton()\"\n    >\n      <span>{{ displayValue || placeholder }}</span>\n\n      <div class=\"po-field-icon-container-right\">\n        <span\n          #icon\n          class=\"po-icon {{ selectIcon }} po-field-icon\"\n          [ngClass]=\"{ 'po-field-icon-disabled': disabled, 'po-field-icon-readonly': readonly }\"\n        ></span>\n      </div>\n    </div>\n\n    <ul #contentList class=\"po-select-content\" [ngClass]=\"{ 'po-invisible': isMobile }\">\n      <li\n        *ngFor=\"let option of options\"\n        [class.po-select-item-selected]=\"selectedValue === option.value\"\n        [value]=\"option.value\"\n        (click)=\"onOptionClick(option)\"\n      >\n        <div class=\"po-select-item\">\n          <ng-container *ngIf=\"selectOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\n\n          <ng-template #defaultOptionTemplate>\n            <span>{{ option?.label }}</span>\n          </ng-template>\n\n          <ng-template\n            #optionTemplate\n            [ngTemplateOutlet]=\"selectOptionTemplate?.templateRef\"\n            [ngTemplateOutletContext]=\"{ $implicit: option }\"\n          >\n          </ng-template>\n        </div>\n      </li>\n    </ul>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n" }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.IterableDiffers }, { type: i0.Renderer2 }, { type: i1.PoControlPositionService }]; }, { contentList: [{
            type: ViewChild,
            args: ['contentList', { read: ElementRef, static: true }]
        }], iconElement: [{
            type: ViewChild,
            args: ['icon', { read: ElementRef, static: true }]
        }], selectElement: [{
            type: ViewChild,
            args: ['select', { read: ElementRef, static: true }]
        }], selectButtonElement: [{
            type: ViewChild,
            args: ['selectButton', { read: ElementRef, static: true }]
        }], ngModelChange: [{
            type: Output,
            args: ['ngModelChange']
        }], readonly: [{
            type: Input,
            args: ['p-readonly']
        }], placeholder: [{
            type: Input,
            args: ['p-placeholder']
        }], options: [{
            type: Input,
            args: ['p-options']
        }], onKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,