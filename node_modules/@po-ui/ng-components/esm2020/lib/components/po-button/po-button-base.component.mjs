import { __decorate } from "tslib";
import { EventEmitter, Input, Output, Directive, HostBinding } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { InputBoolean } from '../../decorators';
import { PoButtonKind } from './po-button-type.enum';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * O `po-button` permite que o usuário execute ações predefinidas pelo desenvolvedor.
 *
 * Através dos tipos, é possível identificar a importância de cada ação.
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `po-button`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `po-button` configurado como `primary` por página.
 * - Para ações irreversíveis use sempre a propriedade `p-danger`.
 *
 * #### Acessibilidade tratada no componente
 *
 * Algumas diretrizes de acessibilidade já são tratadas no componente, internamente, e não podem ser alteradas pelo proprietário do conteúdo. São elas:
 *
 * - Quando em foco, o botão é ativado usando as teclas de Espaço e Enter do teclado. [W3C WAI-ARIA 3.5 Button - Keyboard Interaction](https://www.w3.org/WAI/ARIA/apg/#keyboard-interaction-3)
 * - A área do foco precisar ter uma espessura de pelo menos 2 pixels CSS e o foco não pode ficar escondido por outros elementos da tela. [WCAG 2.4.12: Focus Appearance](https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance-enhanced)
 */
export class PoButtonBaseComponent {
    constructor() {
        /** Ação que será executada quando o usuário clicar sobre o `po-button`. */
        this.click = new EventEmitter();
        this._danger = false;
        this._disabled = false;
        this._loading = false;
        this._small = false;
        this._kind = PoButtonKind.secondary;
    }
    /**
     * @optional
     *
     * @description
     *
     * Exibe um ícone de carregamento à esquerda do _label_ do botão.
     *
     * > Quando esta propriedade estiver habilitada, desabilitará o botão.
     *
     * @default `false`
     */
    set loading(value) {
        this._loading = convertToBoolean(value);
    }
    get loading() {
        return this._loading;
    }
    /**
     * @optional
     *
     * @description
     *
     * Deixa o botão menor.
     *
     * @default `false`
     */
    set small(value) {
        this._small = value === '' ? true : convertToBoolean(value);
    }
    get small() {
        return this._small;
    }
    /**
     * @deprecated 15.x.x
     *
     * @optional
     *
     * @description
     *
     * **Deprecated 15.x.x**. Utilizar `p-kind` no lugar.
     *
     * Define o estilo do `po-button`.
     *
     * Valore válidos:
     *  - `default`: **Deprecated 15.x.x**. Utilizar `p-kind="secondary"`.
     *  - `primary`: deixa o `po-button` com destaque, deve ser usado para ações primárias.
     *  - `danger`: **Deprecated 15.x.x**. Utilizar `p-danger`.
     *  - `link`: **Deprecated 15.x.x**. Utilizar `p-kind="tertiary"`.
     *
     * @default `secondary`
     */
    set type(value) {
        this.kind = value;
    }
    get type() {
        return this.kind;
    }
    /**
     * @optional
     *
     * @description
     *
     * Deve ser usado em ações irreversíveis que o usuário precisa ter cuidado ao executá-la, como a exclusão de um registro.
     *
     * > A propriedade `p-kind="tertiary"` será inativada ao utilizar esta propriedade.
     */
    set danger(value) {
        this._danger = this.kind !== PoButtonKind.tertiary ? value : false;
    }
    get danger() {
        return this._danger;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o estilo do `po-button`.
     *
     * Valore válidos:
     *  - `primary`: deixa o `po-button` com destaque, deve ser usado para ações primárias.
     *  - `secondary`: estilo padrão do `po-button`.
     *  - `tertiary`: o `po-button` é exibido sem cor do fundo, recebendo menos destaque entre as ações.
     *
     * @default `secondary`
     */
    set kind(value) {
        this._kind = PoButtonKind[value] ? PoButtonKind[value] : PoButtonKind.secondary;
    }
    get kind() {
        return this._kind;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o `po-button` e não permite que o usuário interaja com o mesmo.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = value === '' ? true : convertToBoolean(value);
    }
    get disabled() {
        return this._disabled;
    }
}
PoButtonBaseComponent.ɵfac = function PoButtonBaseComponent_Factory(t) { return new (t || PoButtonBaseComponent)(); };
PoButtonBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoButtonBaseComponent, hostVars: 2, hostBindings: function PoButtonBaseComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("p-danger", ctx.danger)("p-kind", ctx.kind);
    } }, inputs: { label: ["p-label", "label"], icon: ["p-icon", "icon"], loading: ["p-loading", "loading"], small: ["p-small", "small"], type: ["p-type", "type"], danger: ["p-danger", "danger"], kind: ["p-kind", "kind"], disabled: ["p-disabled", "disabled"] }, outputs: { click: "p-click" } });
__decorate([
    InputBoolean()
], PoButtonBaseComponent.prototype, "danger", null);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoButtonBaseComponent, [{
        type: Directive
    }], null, { label: [{
            type: Input,
            args: ['p-label']
        }], icon: [{
            type: Input,
            args: ['p-icon']
        }], click: [{
            type: Output,
            args: ['p-click']
        }], loading: [{
            type: Input,
            args: ['p-loading']
        }], small: [{
            type: Input,
            args: ['p-small']
        }], type: [{
            type: Input,
            args: ['p-type']
        }], danger: [{
            type: HostBinding,
            args: ['attr.p-danger']
        }, {
            type: Input,
            args: ['p-danger']
        }], kind: [{
            type: HostBinding,
            args: ['attr.p-kind']
        }, {
            type: Input,
            args: ['p-kind']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,