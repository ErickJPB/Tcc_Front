import { __decorate } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { capitalizeFirstLetter, convertToBoolean, isTypeof, sortValues } from '../../utils/util';
import { poLocaleDefault } from '../../services/po-language/po-language.constant';
import { PoTableColumnSortType } from './enums/po-table-column-sort-type.enum';
import { InputBoolean } from '../../decorators';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-date/po-date.service";
import * as i2 from "../../services/po-language/po-language.service";
import * as i3 from "./services/po-table.service";
export const poTableContainer = ['border', 'shadow'];
export const poTableContainerDefault = 'border';
export const poTableLiteralsDefault = {
    en: {
        noColumns: 'Columns are not defined',
        noData: 'No data found',
        noVisibleColumn: 'No visible column',
        loadingData: 'Loading',
        loadMoreData: 'Load more data',
        seeCompleteSubtitle: 'See complete subtitle',
        completeSubtitle: 'Complete subtitle',
        columnsManager: 'Columns manager'
    },
    es: {
        noColumns: 'Columnas no definidas',
        noData: 'Datos no encontrados',
        noVisibleColumn: 'Sin columnas visibles',
        loadingData: 'Cargando datos',
        loadMoreData: 'Cargar más resultados',
        seeCompleteSubtitle: 'Ver subtitulo completo',
        completeSubtitle: 'Subtitulo completo',
        columnsManager: 'Gerente de columna'
    },
    pt: {
        noColumns: 'Nenhuma definição de colunas',
        noData: 'Nenhum dado encontrado',
        noVisibleColumn: 'Nenhuma coluna visível',
        loadingData: 'Carregando',
        loadMoreData: 'Carregar mais resultados',
        seeCompleteSubtitle: 'Ver legenda completa',
        completeSubtitle: 'Legenda completa',
        columnsManager: 'Gerenciador de colunas'
    },
    ru: {
        noColumns: 'Нет определения столбца',
        noData: 'Данные не найдены',
        noVisibleColumn: 'нет видимых столбцов',
        loadingData: 'погрузка',
        loadMoreData: 'загрузка',
        seeCompleteSubtitle: 'Посмотреть полный субтитр',
        completeSubtitle: 'Полный заголовок',
        columnsManager: 'менеджер колонок'
    }
};
/**
 * @description
 *
 * Este componente de tabela é utilizado para exibição de dados com diferentes tipos como por exemplo textos, data, horas e números com
 * formato personalizado.
 *
 * Também é possivel criar tabelas com ordenação de dados, linhas com detalhes, coluna para seleção de linhas, coluna com ações e também
 * carregamento por demanda através do botão **Carregar mais resultados**.
 *
 * > As linhas de detalhes podem também ser customizadas através do [`p-table-row-template`](/documentation/po-table-row-template).
 *
 * > As colunas podem ser customizadas através dos templates [`p-table-column-template`](/documentation/po-table-column-template)
 * e [`p-table-cell-template`](/documentation/po-table-cell-template).
 *
 * O componente permite gerenciar a exibição das colunas dinamicamente. Esta funcionalidade pode ser acessada através do ícone de engrenagem
 * no canto superior direito do cabeçalho da tabela.
 *
 * Caso a largura de todas as colunas forem definidas e o total ultrapassar o tamanho tabela, será exibido um *scroll* na horizontal para a
 * completa visualização dos dados.
 */
export class PoTableBaseComponent {
    constructor(poDate, languageService, poTableService) {
        this.poDate = poDate;
        this.poTableService = poTableService;
        /**
         * @optional
         *
         * @description
         *
         * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
         * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
         * o mesmo será exibido através do [`po-tooltip`](/documentation/po-tooltip).
         */
        this.hideTextOverflow = false;
        /**
         * @optional
         *
         * @description
         *
         * Permite que o gerenciador de colunas, responsável pela definição de quais colunas serão exibidas, seja escondido.
         *
         * @default `false`
         */
        this.hideColumnsManager = false;
        /**
         * @optional
         *
         * @description
         *
         * Permite fechar um detalhe ou row template automaticamente, ao abrir outro item.
         *
         * @default `false`
         */
        this.autoCollapse = false;
        /**
         * @optional
         *
         * @description
         *
         * Permite que seja adicionado o estado de carregamento no botão "Carregar mais resultados".
         *
         * @default `false`
         */
        this.loadingShowMore = false;
        /**
         * @optional
         *
         * @description
         *
         * Habilita em todas as colunas a opção de ordenação de dados. Caso a coluna seja do tipo 'data' ou 'dateTime' a
         * mesma deve respeitar os tipos de entrada definidos para que sejam ordenadas.
         *
         * @default `false`
         */
        this.sort = false;
        /**
         * @description
         *
         * Se verdadeiro, torna habilitado o botão "Carregar mais resultados".
         *
         * @default `false`
         */
        this.showMoreDisabled = false;
        /**
         * @description
         *
         * Habilita ou desabilita o estilo listrado da tabela (`striped`).
         * > Recomendado para tabelas com maior número de dados, facilitando a sua visualização na tabela.
         *
         * @default `false`
         */
        this.striped = false;
        /**
         * @description
         *
         * Esconde o *checkbox* para seleção de todas as linhas.
         *
         * > Sempre receberá *true* caso a seleção de apenas uma linha esteja ativa.
         *
         * @default `false`
         */
        this.hideSelectAll = false;
        /**
         * @description
         *
         * Define que somente uma linha da tabela pode ser selecionada.
         *
         * > Esta definição não se aplica aos itens filhos, os mesmos possuem comportamento independente do item pai.
         */
        this.singleSelect = false;
        /**
         * @optional
         *
         * @description
         *
         * Define que a coluna de ações ficará no lado direito da tabela.
         *
         * @default `false`
         */
        this.actionRight = false;
        /**
         * @optional
         *
         * @description
         * Evento executado quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
         */
        this.allSelected = new EventEmitter();
        /**
         * @optional
         *
         * @description
         * Evento executado quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
         */
        this.allUnselected = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento executado ao colapsar uma linha do `po-table`.
         *
         * > Como parâmetro o componente envia o item colapsado.
         */
        this.collapsed = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento executado ao expandir uma linha do `po-table`.
         *
         * > Como parâmetro o componente envia o item expandido.
         */
        this.expanded = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento executado ao selecionar uma linha do `po-table`.
         */
        this.selected = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
         * não é visível.
         *
         * Recebe um objeto `{ column, type }` onde:
         *
         * - column (`PoTableColumn`): objeto da coluna que está ordenada.
         * - type (`PoTableColumnSortType`): tipo da ordenação.
         */
        this.showMore = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento executado ao ordenar colunas da tabela.
         *
         * Recebe um objeto `{ column, type }` onde:
         *
         * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.
         * - type (`PoTableColumnSortType`): tipo da ordenação.
         */
        this.sortBy = new EventEmitter();
        /**
         * @optional
         *
         * @description
         * Evento executado ao desmarcar a seleção de uma linha do `po-table`.
         */
        this.unselected = new EventEmitter();
        /**
         * @optional
         *
         * @description
         * Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.
         *
         * O componente envia como parâmetro um array de string com as colunas visíveis atualizadas.
         * Por exemplo: ["idCard", "name", "hireStatus", "age"].
         */
        this.changeVisibleColumns = new EventEmitter();
        /**
         * @optional
         *
         * @description
         * Evento disparado ao clicar no botão de restaurar padrão no gerenciador de colunas.
         *
         * O componente envia como parâmetro um array de string com as colunas configuradas inicialmente.
         * Por exemplo: ["idCard", "name", "hireStatus", "age"].
         */
        this.columnRestoreManager = new EventEmitter();
        this.hasMainColumns = false;
        this.mainColumns = [];
        this.selectAll = false;
        this.sortedColumn = { property: null, ascending: true };
        this.subtitleColumns = [];
        this.page = 1;
        this.pageSize = 10;
        this.hasService = false;
        this._actions = [];
        this._columns = [];
        this._hideDetail = false;
        this._loading = false;
        this.language = poLocaleDefault;
        this._infiniteScrollDistance = 100;
        this._infiniteScroll = false;
        this.language = languageService.getShortLanguage();
    }
    /**
     * @description
     *
     * Lista de itens da tabela.
     * > Se falso, será inicializado como um *array* vazio.
     */
    set items(items) {
        this._items = Array.isArray(items) ? items : [];
        // when haven't items, selectAll should be unchecked.
        if (!this.hasItems) {
            this.selectAll = false;
        }
        else if (!this.hasColumns) {
            this.columns = this.getDefaultColumns(items[0]);
        }
        // timeout necessario para os itens serem refletidos na tabela
        setTimeout(() => this.checkInfiniteScroll());
    }
    get items() {
        return this._items;
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `PoTableColumn`.
     * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
     * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
     *
     */
    set columns(columns) {
        if (this.initialColumns === undefined) {
            this.initialColumns = columns;
        }
        this._columns = columns || [];
        if (this._columns.length) {
            this.setColumnLink();
        }
        else if (this.hasItems) {
            this._columns = this.getDefaultColumns(this.items[0]);
        }
        this.onChangeColumns();
    }
    get columns() {
        return this._columns;
    }
    /**
     * @optional
     *
     * @description
     *
     * Adiciona um contorno arredondado ao `po-table`, as opções são:
     * - `border`: com bordas/linhas.
     * - `shadow`: com sombras.
     *
     * @default `border`
     */
    set container(value) {
        this._container = poTableContainer.includes(value) ? value : poTableContainerDefault;
    }
    get container() {
        return this._container;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura da tabela em *pixels* e fixa o cabeçalho.
     *
     * Ao utilizar essa propriedade será inserido o `virtual-scroll` na tabela melhorando a performance.
     */
    set height(height) {
        this._height = height;
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita a visualização da lista de detalhes de cada linha da coluna.
     *
     * @default `false`
     */
    set hideDetail(hideDetail) {
        this._hideDetail = hideDetail != null && hideDetail.toString() === '' ? true : convertToBoolean(hideDetail);
    }
    get hideDetail() {
        return this._hideDetail;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-table`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoTableLiterals = {
     *    loadMoreData: 'Buscar mais dados',
     *    loadingData: 'Processando',
     *    noColumns: 'Sem colunas',
     *    noData: 'Sem dados',
     *    seeCompleteSubtitle: 'Mostrar legenda completa',
     *    completeSubtitle: 'Todas legendas'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoTableLiterals = {
     *    noData: 'Sem dados'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-table
     *   [p-literals]="customLiterals">
     * </po-table>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = {
                ...poTableLiteralsDefault[poLocaleDefault],
                ...poTableLiteralsDefault[this.language],
                ...value
            };
        }
        else {
            this._literals = poTableLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poTableLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Bloqueia a interação do usuário com os dados da _table_.
     *
     * @default `false`
     */
    set loading(loading) {
        this._loading = convertToBoolean(loading);
    }
    get loading() {
        return this._loading;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de ações.
     *
     * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
     * se encarrega de agrupá-las exibindo o ícone [**po-icon-more**](/guides/icons) que listará as ações ao ser clicado.
     *
     * **A coluna de ações não será exibida quando:**
     *  - a lista conter valores inválidos ou indefinidos.
     *  - tenha uma única ação e a mesma não for visível.
     */
    set actions(actions) {
        this._actions = actions;
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Permite a seleção de linhas na tabela e, caso a propriedade `p-single-select` esteja definida será possível
     * selecionar apenas uma única linha.
     *
     * **Importante:**
     *  - As linhas de detalhe definidas em `PoTableDetail` possuem comportamento independente da linha mestre;
     *  - Cada linha possui por padrão a propriedade dinâmica `$selected`, na qual é possível validar se a linha
     * está selecionada, por exemplo: `item.$selected` ou `item['$selected']`.
     *
     * @default `false`
     */
    set selectable(value) {
        this._selectable = value === '' ? true : convertToBoolean(value);
    }
    get selectable() {
        return this._selectable;
    }
    /**
     * @optional
     *
     * @description
     *
     * Se verdadeiro, ativa a funcionalidade de scroll infinito para a tabela e o botão "Carregar Mais" deixará de ser exibido. Ao chegar no fim da tabela
     * executará a função `p-show-more`.
     *
     * **Regras de utilização:**
     *  - O scroll infinito só funciona para tabelas que utilizam a propriedade `p-height` e que possuem o scroll já na carga inicial dos dados.
     *
     * @default `false`
     */
    set infiniteScroll(value) {
        this._infiniteScroll = convertToBoolean(value && this.height > 0);
    }
    get infiniteScroll() {
        return this._infiniteScroll;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o percentual necessário para disparar o evento `p-show-more`, que é responsável por carregar mais dados na tabela. Caso o valor informado seja maior que 100 ou menor
     * que 0, o valor padrão será 100%
     *
     * **Exemplos:**
     *  - p-infinite-scroll-distance = 80: Quando atingir 80%  do scroll da tabela, o `p-show-more` será disparado.
     */
    set infiniteScrollDistance(value) {
        this._infiniteScrollDistance = value > 100 || value < 0 ? 100 : value;
    }
    get infiniteScrollDistance() {
        return this._infiniteScrollDistance;
    }
    /**
     * @optional
     *
     * @description
     *
     * URL da API responsável por retornar os registros.
     *
     * Ao realizar a busca de mais registros via paginação (Carregar mais resultados), será enviado os parâmetros `page` e `pageSize`, conforme abaixo:
     *
     * ```
     * url + ?page=1&pageSize=10
     * ```
     *
     * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:
     * - Coluna decrescente:
     * ```
     *  url + ?page=1&pageSize=10&order=-name
     * ```
     *
     * - Coluna ascendente:
     * ```
     *  url + ?page=1&pageSize=10&order=name
     * ```
     *
     * > Esta URL deve retornar e receber os dados no padrão de [API do PO UI](https://po-ui.io/guides/api).
     */
    set serviceApi(service) {
        this._serviceApi = service;
        this.setService(this.serviceApi);
        this.hasService = !!service;
        this.showMoreDisabled = !this.hasService;
        this.page = 1;
        this.initializeData();
    }
    get serviceApi() {
        return this._serviceApi;
    }
    get hasColumns() {
        return this.columns && this.columns.length > 0;
    }
    get hasItems() {
        return !!(this.items && this.items.length);
    }
    get nameColumnDetail() {
        return this.columnMasterDetail ? this.columnMasterDetail.property : null;
    }
    get validColumns() {
        const typesValid = [
            'string',
            'number',
            'boolean',
            'date',
            'time',
            'dateTime',
            'currency',
            'subtitle',
            'link',
            'label',
            'icon',
            'cellTemplate',
            'columnTemplate'
        ];
        return this.columns.filter(col => !col.type || typesValid.includes(col.type));
    }
    get sortType() {
        return this.sortedColumn.ascending ? PoTableColumnSortType.Ascending : PoTableColumnSortType.Descending;
    }
    ngOnDestroy() {
        this.poTableServiceSubscription?.unsubscribe();
    }
    ngOnChanges(changes) {
        if (this.singleSelect || this.hideSelectAll) {
            this.selectAll = false;
            this.hideSelectAll = true;
        }
        if (changes.height) {
            this.calculateHeightTableContainer(this.height);
        }
    }
    selectAllRows() {
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach(item => {
                item.$selected = this.selectAll;
            });
            this.emitSelectAllEvents(this.selectAll, [...this.items]);
        }
    }
    selectRow(row) {
        row.$selected = !row.$selected;
        this.emitSelectEvents(row);
        this.configAfterSelectRow(this.items, row);
    }
    selectDetailRow(row) {
        this.emitSelectEvents(row);
    }
    getClassColor(row, column) {
        return column.color ? `po-text-${this.getColumnColor(row, column)}` : '';
    }
    toggleDetail(row) {
        const rowShowDetail = row.$showDetail;
        if (this.autoCollapse) {
            this.collapseAllItems(this.items);
        }
        this.setShowDetail(row, !rowShowDetail);
        this.emitExpandEvents(row);
    }
    toggleRowAction(row) {
        const toggleShowAction = row.$showAction;
        this.items.forEach(item => {
            if (item.$showAction) {
                item.$showAction = false;
            }
        });
        row.$showAction = !toggleShowAction;
    }
    sortColumn(column) {
        if (!this.sort || column.type === 'detail' || column.sortable === false) {
            return;
        }
        this.sortedColumn.ascending = this.sortedColumn.property === column ? !this.sortedColumn.ascending : true;
        this.sortArray(column, this.sortedColumn.ascending);
        this.sortBy.emit({ column, type: this.sortType });
        if (this.hasService && this.sort) {
            this.sortStore = { column, type: this.sortType };
        }
        this.sortedColumn.property = column;
    }
    onShowMore() {
        const sort = this.sortedColumn.property ? { column: this.sortedColumn.property, type: this.sortType } : undefined;
        if (this.hasService) {
            this.page++;
            this.loading = true;
            this.loadingShowMore = true;
            this.poTableServiceSubscription = this.getFilteredItems().subscribe(data => {
                this.items = [...this.items, ...data.items];
                this.showMoreDisabled = !data.hasNext;
                this.loading = false;
                this.loadingShowMore = false;
            });
        }
        this.showMore.emit(sort);
    }
    getFilteredItems(queryParams) {
        const filteredParams = this.getFilteredParams(queryParams);
        return this.poTableService.getFilteredItems(filteredParams);
    }
    setTableResponseProperties(data) {
        this.items = data.items || [];
        this.showMoreDisabled = !data.hasNext;
        this.loading = false;
    }
    initializeData(params) {
        if (this.hasService) {
            this.loading = true;
            this.getFilteredItems(params).subscribe(data => {
                this.setTableResponseProperties(data);
            });
        }
    }
    getDefaultColumns(item) {
        const keys = Object.keys(item);
        return keys
            .filter(key => typeof item[key] !== 'object')
            .map(key => ({ label: capitalizeFirstLetter(key), property: key }));
    }
    setShowDetail(rowIdentifier, isShowDetail) {
        const isRowIndex = typeof rowIdentifier === 'number' && this.items[rowIdentifier];
        const row = isRowIndex ? this.items[rowIdentifier] : rowIdentifier;
        row.$showDetail = isShowDetail;
    }
    collapseAllItems(items) {
        for (const item of items) {
            if (item.$showDetail) {
                this.setShowDetail(item, false);
                this.emitExpandEvents(item);
            }
        }
    }
    configAfterSelectRow(rows, row) {
        if (this.singleSelect) {
            this.unselectOtherRows(rows, row);
        }
        else if (!this.hideSelectAll) {
            this.selectAll = this.isEverySelected(rows);
        }
    }
    emitExpandEvents(row) {
        row.$showDetail ? this.expanded.emit(row) : this.collapsed.emit(row);
    }
    emitSelectAllEvents(selectAll, rows) {
        selectAll ? this.allSelected.emit(rows) : this.allUnselected.emit(rows);
    }
    emitSelectEvents(row) {
        row.$selected ? this.selected.emit(row) : this.unselected.emit(row);
    }
    getColumnColor(row, column) {
        const columnColor = column.color;
        return isTypeof(columnColor, 'function') ? columnColor(row, column.property) : columnColor;
    }
    // Retorna a coluna da lista de colunas que é do tipo detail
    getColumnMasterDetail() {
        return this.columns.find(col => col.type === 'detail');
    }
    // Colunas que são inseridas no <head> da tabela
    getMainColumns() {
        return this.validColumns.filter(col => col.visible !== false);
    }
    // Retorna as colunas com status
    getSubtitleColumns() {
        return this.columns.filter(col => col.type === 'subtitle');
    }
    isEverySelected(items) {
        const someCheckedOrIndeterminate = item => item.$selected || item.$selected === null;
        const everyChecked = item => item.$selected;
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    }
    onChangeColumns() {
        this.setMainColumns();
        this.setColumnMasterDetail();
        this.setSubtitleColumns();
    }
    setColumnLink() {
        this.columns.forEach(column => {
            if (column['type'] === 'link' && !column['link']) {
                column['link'] = 'link';
            }
        });
    }
    setColumnMasterDetail() {
        this.columnMasterDetail = this.getColumnMasterDetail();
    }
    setMainColumns() {
        this.mainColumns = this.getMainColumns();
        this.hasMainColumns = !!this.mainColumns.length;
        this.allColumnsWidthPixels = this.verifyWidthColumnsPixels();
    }
    setSubtitleColumns() {
        this.subtitleColumns = this.getSubtitleColumns();
    }
    sortArray(column, ascending) {
        const itemsList = [...this.items];
        itemsList.sort((leftSide, rightSide) => sortValues(leftSide[column.property], rightSide[column.property], ascending));
        this.items = itemsList;
    }
    unselectOtherRows(rows, row) {
        rows.forEach(item => {
            if (item !== row) {
                item.$selected = false;
            }
        });
    }
    verifyWidthColumnsPixels() {
        return this.hasMainColumns ? this.mainColumns.every(column => column.width && column.width.includes('px')) : false;
    }
    setService(service) {
        if (service && isTypeof(service, 'string')) {
            this.poTableService.setUrl(service);
        }
    }
    getFilteredParams(queryParams) {
        const { page, pageSize, sortStore } = this;
        const filteredParams = {};
        const order = this.getOrderParam(sortStore);
        const params = { page, pageSize, order, ...queryParams };
        for (const key in params) {
            if (params.hasOwnProperty(key) && params[key] !== undefined) {
                filteredParams[key] = params[key];
            }
        }
        return filteredParams;
    }
    getOrderParam(sort = { type: undefined }) {
        const { column, type } = sort;
        if (!column) {
            return;
        }
        if (type === PoTableColumnSortType.Descending) {
            return `-${column.property}`;
        }
        return `${column.property}`;
    }
}
PoTableBaseComponent.ɵfac = function PoTableBaseComponent_Factory(t) { return new (t || PoTableBaseComponent)(i0.ɵɵdirectiveInject(i1.PoDateService), i0.ɵɵdirectiveInject(i2.PoLanguageService), i0.ɵɵdirectiveInject(i3.PoTableService)); };
PoTableBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTableBaseComponent, inputs: { hideTextOverflow: ["p-hide-text-overflow", "hideTextOverflow"], hideColumnsManager: ["p-hide-columns-manager", "hideColumnsManager"], autoCollapse: ["p-auto-collapse", "autoCollapse"], loadingShowMore: ["p-loading-show-more", "loadingShowMore"], sort: ["p-sort", "sort"], showMoreDisabled: ["p-show-more-disabled", "showMoreDisabled"], striped: ["p-striped", "striped"], hideSelectAll: ["p-hide-select-all", "hideSelectAll"], singleSelect: ["p-single-select", "singleSelect"], actionRight: ["p-actions-right", "actionRight"], maxColumns: ["p-max-columns", "maxColumns"], items: ["p-items", "items"], columns: ["p-columns", "columns"], container: ["p-container", "container"], height: ["p-height", "height"], hideDetail: ["p-hide-detail", "hideDetail"], literals: ["p-literals", "literals"], loading: ["p-loading", "loading"], actions: ["p-actions", "actions"], selectable: ["p-selectable", "selectable"], infiniteScroll: ["p-infinite-scroll", "infiniteScroll"], infiniteScrollDistance: ["p-infinite-scroll-distance", "infiniteScrollDistance"], serviceApi: ["p-service-api", "serviceApi"] }, outputs: { allSelected: "p-all-selected", allUnselected: "p-all-unselected", collapsed: "p-collapsed", expanded: "p-expanded", selected: "p-selected", showMore: "p-show-more", sortBy: "p-sort-by", unselected: "p-unselected", changeVisibleColumns: "p-change-visible-columns", columnRestoreManager: "p-restore-column-manager" }, features: [i0.ɵɵNgOnChangesFeature] });
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "hideTextOverflow", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "hideColumnsManager", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "autoCollapse", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "loadingShowMore", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "sort", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "showMoreDisabled", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "striped", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "hideSelectAll", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "singleSelect", void 0);
__decorate([
    InputBoolean()
], PoTableBaseComponent.prototype, "actionRight", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableBaseComponent, [{
        type: Directive
    }], function () { return [{ type: i1.PoDateService }, { type: i2.PoLanguageService }, { type: i3.PoTableService }]; }, { hideTextOverflow: [{
            type: Input,
            args: ['p-hide-text-overflow']
        }], hideColumnsManager: [{
            type: Input,
            args: ['p-hide-columns-manager']
        }], autoCollapse: [{
            type: Input,
            args: ['p-auto-collapse']
        }], loadingShowMore: [{
            type: Input,
            args: ['p-loading-show-more']
        }], sort: [{
            type: Input,
            args: ['p-sort']
        }], showMoreDisabled: [{
            type: Input,
            args: ['p-show-more-disabled']
        }], striped: [{
            type: Input,
            args: ['p-striped']
        }], hideSelectAll: [{
            type: Input,
            args: ['p-hide-select-all']
        }], singleSelect: [{
            type: Input,
            args: ['p-single-select']
        }], actionRight: [{
            type: Input,
            args: ['p-actions-right']
        }], maxColumns: [{
            type: Input,
            args: ['p-max-columns']
        }], allSelected: [{
            type: Output,
            args: ['p-all-selected']
        }], allUnselected: [{
            type: Output,
            args: ['p-all-unselected']
        }], collapsed: [{
            type: Output,
            args: ['p-collapsed']
        }], expanded: [{
            type: Output,
            args: ['p-expanded']
        }], selected: [{
            type: Output,
            args: ['p-selected']
        }], showMore: [{
            type: Output,
            args: ['p-show-more']
        }], sortBy: [{
            type: Output,
            args: ['p-sort-by']
        }], unselected: [{
            type: Output,
            args: ['p-unselected']
        }], changeVisibleColumns: [{
            type: Output,
            args: ['p-change-visible-columns']
        }], columnRestoreManager: [{
            type: Output,
            args: ['p-restore-column-manager']
        }], items: [{
            type: Input,
            args: ['p-items']
        }], columns: [{
            type: Input,
            args: ['p-columns']
        }], container: [{
            type: Input,
            args: ['p-container']
        }], height: [{
            type: Input,
            args: ['p-height']
        }], hideDetail: [{
            type: Input,
            args: ['p-hide-detail']
        }], literals: [{
            type: Input,
            args: ['p-literals']
        }], loading: [{
            type: Input,
            args: ['p-loading']
        }], actions: [{
            type: Input,
            args: ['p-actions']
        }], selectable: [{
            type: Input,
            args: ['p-selectable']
        }], infiniteScroll: [{
            type: Input,
            args: ['p-infinite-scroll']
        }], infiniteScrollDistance: [{
            type: Input,
            args: ['p-infinite-scroll-distance']
        }], serviceApi: [{
            type: Input,
            args: ['p-service-api']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,