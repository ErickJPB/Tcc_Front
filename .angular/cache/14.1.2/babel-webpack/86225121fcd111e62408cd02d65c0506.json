{"ast":null,"code":"import { Injector } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ServiceBaseService } from '../service-base.service';\nimport { Endpoint } from 'src/app/shared/endpoint';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(_http, injector, cookie) {\n      this._http = _http;\n      this.injector = injector;\n      this.cookie = cookie;\n      this.servicebase = new ServiceBaseService(this._http, this.cookie);\n    }\n\n    ngOnInit() {\n      this.servicebase.GetApiBase();\n    }\n\n    CreateUser(user) {\n      console.log(JSON.stringify(user));\n      const url = \"https://easymarketserviceapi20221208192441.azurewebsites.net/v1/\";\n      return this._http.post(url + Endpoint.CriarUsuario, JSON.stringify(user), this.servicebase.httpOptions);\n    }\n\n    UpdateUser(user) {\n      const url = \"https://easymarketserviceapi20221208192441.azurewebsites.net/v1/\";\n      return this._http.put(url + Endpoint.UpdateUser, JSON.stringify(user), this.servicebase.httpOptions);\n    }\n\n    GetAllUser() {\n      const url = \"https://easymarketserviceapi20221208192441.azurewebsites.net/v1/\";\n      return this._http.get(url + Endpoint.GetAllUsers, this.servicebase.httpOptions).pipe(map(this.extrairRespostaItem));\n    }\n\n    extrairRespostaItem(resposta) {\n      return resposta.items || {};\n    }\n\n    getCity(estado) {\n      switch (estado) {\n        case 1:\n          {\n            return [{\n              label: 'Palhoça',\n              value: 5\n            }, {\n              label: 'Lages',\n              value: 6\n            }, {\n              label: 'Balneário Camboriú',\n              value: 7\n            }, {\n              label: 'Brusque',\n              value: 8\n            }];\n          }\n\n        case 2:\n          {\n            return [{\n              label: 'São Paulo',\n              value: 9\n            }, {\n              label: 'Guarulhos',\n              value: 10\n            }, {\n              label: 'Campinas',\n              value: 11\n            }, {\n              label: 'São Bernardo do Campo',\n              value: 12\n            }];\n          }\n\n        case 3:\n          {\n            return [{\n              label: 'Rio de Janeiro',\n              value: 13\n            }, {\n              label: 'São Gonçalo',\n              value: 14\n            }, {\n              label: 'Duque de Caxias',\n              value: 15\n            }, {\n              label: 'Nova Iguaçu',\n              value: 16\n            }];\n          }\n\n        case 4:\n          {\n            return [{\n              label: 'Belo Horizonte',\n              value: 17\n            }, {\n              label: 'Uberlândia',\n              value: 18\n            }, {\n              label: 'Contagem',\n              value: 19\n            }, {\n              label: 'Juiz de Fora',\n              value: 20\n            }];\n          }\n      }\n\n      return [];\n    }\n\n    getUserDocument(value) {\n      const cpfField = {\n        property: 'cpf',\n        visible: true\n      };\n      const cnpjField = {\n        property: 'cnpj',\n        visible: true\n      };\n      const document = value.isJuridicPerson ? cnpjField : cpfField;\n      return {\n        fields: [document]\n      };\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.CookieService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}