{"ast":null,"code":"import { PoDynamicFormField, PoDynamicFormFieldChanged, PoDynamicFormValidation, PoNotificationService, PoTableColumn, PoMultiselectOption, PoModalComponent, PoNotification, PoToasterType } from '@po-ui/ng-components';\nimport { take, finalize } from 'rxjs/operators';\nimport { PoPageDynamicSearchFilters, PoPageDynamicSearchLiterals } from '@po-ui/ng-templates';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@po-ui/ng-components\";\nimport * as i2 from \"src/app/services/UserService/user.service\";\nimport * as i3 from \"@po-ui/ng-templates\";\nconst _c0 = [\"optionsForm\"];\nexport let CadUserComponent = /*#__PURE__*/(() => {\n  class CadUserComponent {\n    constructor(poNotification, registerService) {\n      this.poNotification = poNotification;\n      this.registerService = registerService;\n      this.listUsers = [];\n      this.dadosSegmentoMultiselect = [];\n      this.validateFields = ['email'];\n      this.edit = false;\n      this.IsNew = false;\n      this.fieldsSearch = [{\n        property: 'filterUser',\n        gridColumns: 6,\n        gridSmColumns: 12,\n        label: 'Pesquisa Usuario',\n        optional: false,\n        searchService: 'https://localhost:44386/v1/getUsers',\n        columns: [{\n          property: 'nome',\n          label: 'Nome'\n        }, {\n          property: 'email',\n          label: 'e-mail'\n        }],\n        format: ['Id', 'nome'],\n        fieldLabel: 'nome',\n        fieldValue: 'email'\n      }];\n      this.fields = [{\n        property: 'nome',\n        divider: 'Dados Pessoais',\n        required: true,\n        disabled: this.IsNew,\n        minLength: 4,\n        maxLength: 50,\n        gridColumns: 6,\n        gridSmColumns: 12,\n        order: 1,\n        placeholder: 'informe seu nome'\n      }, {\n        property: 'dataNascimento',\n        label: 'Data de nascimento',\n        type: 'date',\n        format: 'mm/dd/yyyy',\n        gridColumns: 6,\n        gridSmColumns: 12,\n        maxValue: '2010-01-01',\n        errorMessage: 'The date must be before the year 2010.',\n        order: -1\n      }, {\n        property: 'cpf',\n        required: true,\n        label: 'CPF',\n        mask: '999.999.999-99',\n        gridColumns: 6,\n        gridSmColumns: 12,\n        visible: false\n      }, {\n        property: 'cnpj',\n        label: 'CNPJ',\n        mask: '99.999.999/9999-99',\n        gridColumns: 6,\n        gridSmColumns: 12,\n        visible: false\n      }, {\n        property: 'genero',\n        label: \"Gênero\",\n        gridColumns: 6,\n        gridSmColumns: 12,\n        options: ['Homem', 'Mulher', 'Outro'],\n        order: 2\n      }, {\n        property: 'password',\n        label: 'Senha secreta',\n        gridColumns: 6,\n        required: true,\n        secret: true,\n        pattern: '[a-zA]{5}[Z0-9]{3}',\n        errorMessage: 'deve conter  5 letras e  3 números',\n        placeholder: 'Defina sua senha'\n      }, {\n        property: 'email',\n        label: \"E-mail\",\n        divider: 'Contato',\n        required: true,\n        gridColumns: 6,\n        icon: 'po-icon-mail',\n        pattern: '[@]{1}',\n        errorMessage: 'Deve ser um e-mail'\n      }, {\n        property: 'telefone',\n        label: \"Telefone\",\n        mask: '(99) 99999-9999',\n        gridColumns: 6\n      }, {\n        property: 'endereco',\n        label: \"Endereço\",\n        gridColumns: 6\n      }, {\n        property: 'number',\n        label: 'Número',\n        type: 'number',\n        gridColumns: 6,\n        maxValue: 10000,\n        errorMessage: 'Numero Inválido'\n      }, {\n        property: 'estado',\n        label: \"Estado\",\n        gridColumns: 6,\n        options: [{\n          label: 'Santa Catarina',\n          value: 1\n        }, {\n          label: 'São Paulo',\n          value: 2\n        }, {\n          label: 'Rio de Janeiro',\n          value: 3\n        }, {\n          label: 'Minas Gerais',\n          value: 4\n        }]\n      }, {\n        property: 'cidade',\n        label: 'Cidade',\n        gridColumns: 6\n      }, {\n        property: 'permissao',\n        label: 'Permissão',\n        divider: 'Permissões',\n        required: true,\n        gridColumns: 6,\n        gridSmColumns: 12,\n        optional: false,\n        options: [{\n          label: 'Administrador',\n          value: 1\n        }, {\n          label: 'Gerente',\n          value: 2\n        }, {\n          label: 'Operacional',\n          value: 3\n        }, {\n          label: 'Pdv',\n          value: 4\n        }],\n        optionsMulti: false\n      }];\n      this.filters = [{\n        property: 'nome',\n        gridColumns: 6\n      }, {\n        property: 'email',\n        gridColumns: 6\n      }, {\n        property: 'id',\n        gridColumns: 6\n      }, {\n        property: 'cpf',\n        gridColumns: 6\n      }];\n      this.literals = {\n        filterConfirmLabel: 'Aplicar',\n        filterTitle: 'Filtro avançado',\n        quickSearchLabel: 'Valor pesquisado:'\n      };\n    }\n\n    load() {\n      location.reload();\n    }\n\n    novoCad() {\n      this.users = {\n        nome: \"\",\n        dataNascimento: null,\n        cpf: \"\",\n        email: \"\",\n        endereco: \"\",\n        estado: \"\",\n        genero: \"\",\n        number: \"\",\n        password: \"\",\n        cidade: \"\",\n        permissao: \"\",\n        telefone: \"\"\n      };\n      this.labelButton = \"Salvar\";\n      this.idRegister = null;\n      this.edit = false;\n      this.IsNew = true;\n    }\n\n    getForm(form) {\n      this.dynamicForm = form;\n      this.users = this.dynamicForm.form.value;\n      console.log(this.idRegister);\n\n      if (this.idRegister == null) {\n        this.registerService.CreateUser(this.users).pipe(take(2), finalize(() => {})).subscribe(x => {\n          this.poNotification.success('Cadastro salvo com sucesso!');\n          this.edit = true;\n          this.idRegister = x[\"idRegister\"];\n          this.labelButton = \"Alterar\";\n        });\n      } else {\n        console.log(this.idRegister);\n        this.users.Id = this.idRegister.toString();\n        console.log(this.users.Id);\n        this.registerService.UpdateUser(this.users).pipe(take(1), finalize(() => {})).subscribe(x => {\n          this.showNotification(x[\"retorno\"], 1000, PoToasterType.Success);\n        });\n      }\n    }\n\n    getvalue() {\n      var teste2 = document.getElementById(\"dynamicForm\");\n      console.log(teste2);\n    }\n\n    getSearch(form) {\n      this.searchForm = form.value;\n      console.log(this.searchForm);\n      this.getvalue();\n    }\n\n    ngOnInit() {\n      this.users = {\n        nome: \"\",\n        dataNascimento: null,\n        cpf: \"\",\n        email: \"\",\n        endereco: \"\",\n        estado: \"\",\n        genero: \"\",\n        number: \"\",\n        password: \"\",\n        cidade: \"\",\n        permissao: \"\",\n        telefone: \"\"\n      };\n      this.labelButton = \"Salvar\";\n      this.size = \"auto\";\n      this.IsNew = false;\n    }\n\n    onChangeFields(changedValue) {\n      console.log(changedValue.value.estado);\n      return {\n        value: {\n          cidade: undefined\n        },\n        fields: [{\n          property: 'cidade',\n          gridColumns: 6,\n          options: this.registerService.getCity(changedValue.value.estado),\n          disabled: false\n        }]\n      };\n    }\n\n    onLoadFields(value) {\n      return this.registerService.getUserDocument(value);\n    }\n\n    getColumns() {\n      return [{\n        property: 'nome',\n        label: 'Nome'\n      }, {\n        property: 'email',\n        label: 'E-mail',\n        type: 'string'\n      }, {\n        property: 'cpf',\n        label: 'Cpf'\n      }, {\n        property: 'RolesId',\n        label: 'Tipo de usuario',\n        type: 'string'\n      }, {\n        property: 'Id',\n        label: 'Id'\n      }];\n    }\n\n    getItems() {\n      this.registerService.GetAllUser().pipe(take(1), finalize(() => {\n        this.isHideLoading = true;\n      })).subscribe(userlist => {\n        userlist.forEach(dados => {\n          this.returnPermissaoString(dados);\n          this.listUsers.push({\n            nome: dados.nome,\n            email: dados.email,\n            cpf: dados.cpf,\n            Id: dados.Id,\n            RolesId: this.PermissaoString,\n            Genero: dados.Genero,\n            cidade: dados.cidade,\n            datanascimento: dados.datanascimento,\n            estado: dados.estado,\n            number: dados.number,\n            endereco: dados.endereco,\n            Password: dados.Password\n          });\n        });\n      });\n      return this.listUsers;\n    }\n\n    clickbtnPesquisar() {\n      this.hiringProcessesColumns = this.getColumns();\n      this.listUsers = [];\n      this.isHideLoading = false;\n      this.hiringProcesses = this.getItems();\n    }\n\n    Confirm() {\n      this.poModal.close();\n      this.SelectedUser();\n    }\n\n    SelectedUser() {\n      const selecttedUser = this.hiringProcesses.find(user => user['$selected']);\n      var message = \"Usuário \" + selecttedUser.nome + \" Selecionado\";\n      this.showNotification(message, 1500, PoToasterType.Success);\n      this.users = {\n        nome: selecttedUser.nome,\n        dataNascimento: new Date(selecttedUser.datanascimento.toString()),\n        cpf: selecttedUser.cpf,\n        email: selecttedUser.email,\n        endereco: selecttedUser.endereco,\n        estado: selecttedUser.estado,\n        genero: selecttedUser.Genero,\n        number: selecttedUser.number,\n        password: selecttedUser.Password,\n        cidade: selecttedUser.cidade,\n        permissao: this.returnPermissaoInt(selecttedUser),\n        telefone: \"\"\n      };\n\n      if (selecttedUser.Id != null) {\n        this.labelButton = \"Alterar\";\n        this.edit = true;\n        this.idRegister = selecttedUser.Id;\n      }\n    }\n\n    restaurarGeneroInt(dados) {\n      var genero;\n\n      switch (dados.Genero) {\n        case \"Homem\":\n          genero = 1;\n          break;\n\n        case \"Mulher\":\n          genero = 2;\n          break;\n\n        default:\n          genero = 3;\n      }\n\n      return genero;\n    }\n\n    returnPermissaoString(dados) {\n      switch (dados.RolesId) {\n        case \"1\":\n          this.PermissaoString = \"Adminstrador\";\n          break;\n\n        case \"2\":\n          this.PermissaoString = \"Gerente\";\n          break;\n\n        case \"3\":\n          this.PermissaoString = \"Operacional\";\n          break;\n\n        default:\n          this.PermissaoString = \"Pdv\";\n      }\n    }\n\n    returnPermissaoInt(dados) {\n      switch (dados.RolesId) {\n        case \"Adminstrador\":\n          this.PermissaoString = \"1\";\n          break;\n\n        case \"Gerente\":\n          this.PermissaoString = \"2\";\n          break;\n\n        case \"Operacional\":\n          this.PermissaoString = \"3\";\n          break;\n\n        default:\n          this.PermissaoString = \"4\";\n      }\n\n      return this.PermissaoString;\n    }\n\n    showNotification(message, duration, type) {\n      const poNotification = {\n        message: message,\n        orientation: undefined,\n        action: undefined,\n        actionLabel: '',\n        duration: duration\n      };\n\n      switch (type) {\n        case PoToasterType.Success:\n          {\n            this.poNotification.success(poNotification);\n            break;\n          }\n\n        case PoToasterType.Error:\n          {\n            this.poNotification.error(poNotification);\n            break;\n          }\n\n        case PoToasterType.Warning:\n          {\n            this.poNotification.warning(poNotification);\n            break;\n          }\n\n        case PoToasterType.Information:\n          {\n            this.poNotification.information(poNotification);\n            break;\n          }\n\n        default:\n          {\n            this.poNotification.success(poNotification);\n            break;\n          }\n      }\n    }\n\n    filter(filters) {\n      let filteredItems = [...this.listUsers];\n      console.log(filters);\n      Object.keys(filters).forEach(filter => {\n        filteredItems = filteredItems.filter(register => {\n          if (typeof register[filter] === 'string') {\n            return register[filter].toLocaleLowerCase().includes(filters[filter].toLocaleLowerCase());\n          } else {\n            return register[filter] === filters[filter];\n          }\n        });\n      });\n      return filteredItems;\n    }\n\n    searchItems(filter) {\n      console.log(filter);\n      this.hiringProcesses = [];\n      this.hiringProcesses = this.filter(filter);\n    }\n\n    onQuickSearch(filter) {\n      console.log(filter);\n      filter ? this.searchItems({\n        nome: filter\n      }) : this.resetFilters();\n    }\n\n    resetFilters() {\n      this.hiringProcesses = this.resetFilterHiringProcess();\n    }\n\n    resetFilterHiringProcess() {\n      return [...this.getItems()];\n    }\n\n    onAdvancedSearch(filter) {\n      filter ? this.searchItems(filter) : this.resetFilters();\n    }\n\n    onChangeDisclaimers(disclaimers) {\n      const filter = {};\n      disclaimers.forEach(item => {\n        filter[item.property] = item.value;\n      });\n      this.searchItems(filter);\n    }\n\n  }\n\n  CadUserComponent.ɵfac = function CadUserComponent_Factory(t) {\n    return new (t || CadUserComponent)(i0.ɵɵdirectiveInject(i1.PoNotificationService), i0.ɵɵdirectiveInject(i2.UserService));\n  };\n\n  CadUserComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CadUserComponent,\n    selectors: [[\"app-cad-user\"]],\n    viewQuery: function CadUserComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(PoModalComponent, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.form = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poModal = _t.first);\n      }\n    },\n    decls: 18,\n    vars: 18,\n    consts: [[1, \"po-row\"], [\"p-label\", \"Pesquisar\", 1, \"po-md-3\", 3, \"p-click\"], [\"p-label\", \"Novo\", 1, \"po-md-3\", 3, \"p-disabled\", \"p-click\"], [\"p-title\", \"Pesquisa de Usuario\", \"p-size\", \"auto\"], [\"modalSearch\", \"\"], [1, \"sample-container\"], [3, \"hidden\"], [\"p-title\", \"Pesquisar\", 3, \"p-filters\", \"p-literals\", \"p-quick-search\", \"p-advanced-search\", \"p-change-disclaimers\"], [3, \"p-selectable\", \"p-single-select\", \"p-sort\", \"p-striped\", \"p-columns\", \"p-items\"], [3, \"p-disabled-align\"], [\"p-kind\", \"primary\", \"p-label\", \"Selecionar\", 3, \"p-click\"], [\"parentForm\", \"\"], [\"p-auto-focus\", \"nome\", 3, \"p-fields\", \"p-load\", \"p-validate\", \"p-validate-fields\", \"p-value\"], [\"dynamicForm\", \"\"], [1, \"po-md-3\", 3, \"p-label\", \"p-disabled\", \"p-click\"]],\n    template: function CadUserComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r3 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"po-button\", 1);\n        i0.ɵɵlistener(\"p-click\", function CadUserComponent_Template_po_button_p_click_1_listener() {\n          i0.ɵɵrestoreView(_r3);\n\n          const _r0 = i0.ɵɵreference(4);\n\n          ctx.clickbtnPesquisar();\n          return i0.ɵɵresetView(_r0.open());\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"po-button\", 2);\n        i0.ɵɵlistener(\"p-click\", function CadUserComponent_Template_po_button_p_click_2_listener() {\n          return ctx.novoCad();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"po-modal\", 3, 4)(5, \"div\", 5);\n        i0.ɵɵelement(6, \"po-loading-overlay\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"po-page-dynamic-search\", 7);\n        i0.ɵɵlistener(\"p-quick-search\", function CadUserComponent_Template_po_page_dynamic_search_p_quick_search_7_listener($event) {\n          return ctx.onQuickSearch($event);\n        })(\"p-advanced-search\", function CadUserComponent_Template_po_page_dynamic_search_p_advanced_search_7_listener($event) {\n          return ctx.onAdvancedSearch($event);\n        })(\"p-change-disclaimers\", function CadUserComponent_Template_po_page_dynamic_search_p_change_disclaimers_7_listener($event) {\n          return ctx.onChangeDisclaimers($event);\n        });\n        i0.ɵɵelement(8, \"po-table\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"po-modal-footer\", 9)(10, \"po-button\", 10);\n        i0.ɵɵlistener(\"p-click\", function CadUserComponent_Template_po_button_p_click_10_listener() {\n          return ctx.Confirm();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtext(11, \" > \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"form\", null, 11);\n        i0.ɵɵelement(14, \"po-dynamic-form\", 12, 13);\n        i0.ɵɵelementStart(16, \"div\", 0)(17, \"po-button\", 14);\n        i0.ɵɵlistener(\"p-click\", function CadUserComponent_Template_po_button_p_click_17_listener() {\n          i0.ɵɵrestoreView(_r3);\n\n          const _r2 = i0.ɵɵreference(15);\n\n          return i0.ɵɵresetView(ctx.getForm(_r2));\n        });\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        const _r2 = i0.ɵɵreference(15);\n\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"p-disabled\", !ctx.edit);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"hidden\", ctx.isHideLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"p-filters\", ctx.filters)(\"p-literals\", ctx.literals);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"p-selectable\", true)(\"p-single-select\", true)(\"p-sort\", true)(\"p-striped\", true)(\"p-columns\", ctx.hiringProcessesColumns)(\"p-items\", ctx.hiringProcesses);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"p-disabled-align\", false);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"p-fields\", ctx.fields)(\"p-load\", ctx.onLoadFields.bind(ctx))(\"p-validate\", ctx.onChangeFields.bind(ctx))(\"p-validate-fields\", ctx.validateFields)(\"p-value\", ctx.users);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"p-label\", ctx.labelButton)(\"p-disabled\", _r2 == null ? null : _r2.form.invalid);\n      }\n    },\n    dependencies: [i1.PoButtonComponent, i1.PoDynamicFormComponent, i1.PoLoadingOverlayComponent, i1.PoModalComponent, i1.PoModalFooterComponent, i1.PoTableComponent, i3.PoPageDynamicSearchComponent]\n  });\n  return CadUserComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}